{"version":3,"sources":["App.style.tsx","components/Editor.tsx",".templates/function.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","main","window","innerHeight","Column","div","Editor","value","onChange","height","language","ev","theme","Template","templateContent","MAP","FILTER","REDUCE","TemplateDictionary","Proxy","get","target","prop","key","isTemplate","analyze","fn","rawData","data","Array","isArray","JSON","parse","f","eval","e","itemCounter","array","length","App","useState","stringify","raw","setRaw","default","setFn","formRef","useRef","result","className","ref","htmlFor","title","form","current","formData","FormData","name","selected","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m8CAEO,IAAMA,EAAYC,IAAOC,KAAV,IAKVC,OAAOC,aA0CNC,EAASJ,IAAOK,IAAV,M,8FCxCZ,SAASC,EAAT,GAAmD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAM9B,OACE,oCACE,kBAAC,mBAAD,CACEC,OAAO,oBACPC,SAAS,aACTH,MAAOA,EACPC,SAViB,SAACG,EAAIJ,GAC1BA,GAASC,GAAYA,EAASD,IAU1BK,MAAM,e,yGCtBFC,E,iBAAAA,K,UAAAA,E,gBAAAA,E,iBAAAA,M,KAMZ,IAAMC,GAAe,mBAChBD,EAASE,IADO,uLAMhBF,EAASG,OANO,+FAShBH,EAASI,OATO,geAuBRC,EAAqB,IAAIC,MAClCL,EACA,CACIM,IAAK,SAAUC,EAAQC,GACnB,OAOZ,SAAoBC,EAA+BF,GAC/C,OAAOE,KAAOF,EARFG,CAAWF,EAAMD,GACVA,EAAOC,GAEXD,EAAOR,EAASE,S,u8BC9BnC,SAASU,QAAQC,GAAYC,SACzB,IACI,IAAMC,MAAOC,MAAMC,QAAQC,KAAKC,MAAML,UAChCI,KAAKC,MAAML,SADJ,4KAEHA,SACNM,EAAI,SAACL,GAAD,OAAiBA,GAEzB,OADAM,KAAK,OAAD,OAAQR,KACLO,EAAEL,OACX,MAAOO,GACL,MAAO,IAIf,SAASC,YAAYC,GACjB,OAAIR,MAAMC,QAAQO,GACR,WAAN,OAAkBA,EAAMC,OAAxB,WAEG,GAGX,IAAMC,IAA6B,WAAO,IAAD,EACfC,oDAAST,KAAKU,UAAUb,kDAAM,KAAM,IADrB,+KAC9Bc,EAD8B,KACzBC,EADyB,OAEjBH,oDAAStB,mDAAmB0B,SAFX,+KAE9BlB,EAF8B,KAE1BmB,EAF0B,KAG/BC,EAAUC,kDAAwB,MAMxC,IAAMC,EAASvB,QAAQC,EAAIgB,GAG3B,OACI,2DAAC,0CAAD,KACI,2DAAC,0CAAD,CAAQO,UAAU,WACd,mEAAMC,IAAKJ,GACP,oEAAOK,QAAQ,YAAf,qBACA,qEAAQC,MAAM,WAAW5C,SAbzC,WACI,IAAM6C,EAAOP,EAAQQ,QACfC,EAAW,IAAIC,SAASH,GAC9BR,EAAM3B,mDAAmBqC,EAASnC,IAAI,eAUyBqC,KAAK,YACpD,qEAAQC,UAAQ,EACRnD,MAAOM,mDAASE,KAAMF,mDAASE,KACvC,qEACIR,MAAOM,mDAASG,QAASH,mDAASG,QACtC,qEACIT,MAAOM,mDAASI,QAASJ,mDAASI,UAG9C,2DAAC,2CAAD,CAAQV,MAAOmB,EAAIlB,SAAUqC,IAC7B,2DAAC,2CAAD,CAAQtC,MAAOmC,EAAKlC,SAAUmC,KAElC,2DAAC,0CAAD,CAAQM,UAAU,UACd,sEAAMD,GAAUZ,YAAYY,IAC5B,sEACN,mEAAMC,UAAU,eAAelB,KAAKU,UAAUO,EAAQ,KAAM,QAOvDT,2B,0voBCrDKoB,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACzB,EAAA,EAAD,MAAS0B,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3356a25.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 1fr;\r\n  flex-direction: row;\r\n  height: ${window.innerHeight}px;\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 100%;\r\n\r\n  .editors {\r\n    background-color: #202124;\r\n    display: grid;\r\n    grid-template-rows: 2rem 1fr 2fr;\r\n    padding: 16px 0;\r\n    \r\n    form {\r\n      align-items: center;\r\n      display: flex;\r\n      justify-content: center;\r\n      margin: 0;\r\n      padding: 0 16px 16px;\r\n      \r\n      label {\r\n        color: whitesmoke;\r\n        font-family: Consolas, serif;\r\n        padding-right: 8px;\r\n      }\r\n    }\r\n  }\r\n\r\n  & > :last-child {\r\n    display: grid;\r\n    grid-template-rows: 1fr;\r\n    padding: 16px 0;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n\r\n    & > :first-child {\r\n      width: 100%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Column = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 1fr;\r\n  grid-template-columns: 1fr;\r\n  width: 100%;\r\n  overflow: auto;\r\n\r\n  &.result {\r\n    grid-template-rows: 16px 1fr;\r\n    grid-template-columns: 1fr;\r\n    height: calc(100% - 32px);\r\n    width: calc(100% - 32px);\r\n    padding: 16px;\r\n  }\r\n`;\r\n","import React from \"react\";\n\nimport { ControlledEditor } from \"@monaco-editor/react\";\n\nexport interface EditorProps {\n  value: string;\n  onChange?: (value: string) => void;\n}\n\nexport function Editor({ value, onChange }: EditorProps) {\n  // @ts-ignore\n  const handleOnChange = (ev, value?: string) => {\n    value && onChange && onChange(value);\n  };\n\n  return (\n    <>\n      <ControlledEditor\n        height=\"calc(100% - 16px)\"\n        language=\"javascript\"\n        value={value}\n        onChange={handleOnChange}\n        theme=\"vs-dark\"\n      />\n    </>\n  );\n}\n","export enum Template {\n    MAP = 'MAP',\n    FILTER = 'FILTER',\n    REDUCE = 'REDUCE',\n}\n\nconst templateContent = {\n    [Template.MAP]: `function map(data){\n    return data.map( ({first_name, last_name, position}) => \n    \\`My name is \\${first_name} \\${last_name} and my position is \\${position}\\`\n  )\n}`,\n    [Template.FILTER]: `function filter(data){\n    return data.filter( ({salary}) => salary > 45)\n}`,\n    [Template.REDUCE]: `function reduce(data){\n    const [employeesWithMaxSalary] = data.reduce(([employees, maxSalary], currentEmployee) => {\n        if (currentEmployee.salary > maxSalary) {\n          return [[currentEmployee], currentEmployee.salary]\n        }\n        if (currentEmployee.salary === maxSalary) {\n          return [employees.concat(currentEmployee), maxSalary]\n        }\n        return [employees, maxSalary]\n    }, [undefined, 0])\n    return employeesWithMaxSalary\n}`\n}\n\nexport const TemplateDictionary = new Proxy<Record<string, string>>(\n    templateContent,\n    {\n        get: function (target, prop) {\n            if (isTemplate(prop, target)) {\n                return target[prop]\n            }\n            return target[Template.MAP]\n        }\n    })\n\nfunction isTemplate(key: string | symbol | number, target: Record<Template, string>): key is Template {\n    return key in target\n}\n","import React, {FunctionComponent, useRef, useState} from \"react\";\r\nimport {Editor} from \"./components\";\r\nimport {Template, TemplateDictionary} from \"./.templates/function\";\r\nimport data from \"./.templates/data.json\";\r\nimport {Column, Container} from \"./App.style\";\r\n\r\nfunction analyze(fn: string, rawData: string) {\r\n    try {\r\n        const data = Array.isArray(JSON.parse(rawData))\r\n            ? JSON.parse(rawData)\r\n            : [...rawData];\r\n        let f = (data: any[]) => data;\r\n        eval(`f = ${fn}`);\r\n        return f(data);\r\n    } catch (e) {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction itemCounter(array: object): string {\r\n    if (Array.isArray(array)) {\r\n        return `Length: ${array.length} items.`;\r\n    }\r\n    return ''\r\n}\r\n\r\nconst App: FunctionComponent<{}> = () => {\r\n    const [raw, setRaw] = useState(JSON.stringify(data, null, 2));\r\n    const [fn, setFn] = useState(TemplateDictionary.default);\r\n    const formRef = useRef<HTMLFormElement>(null)\r\n    function onSelectChange () {\r\n        const form = formRef.current\r\n        const formData = new FormData(form as HTMLFormElement)\r\n        setFn(TemplateDictionary[formData.get('template') as Template])\r\n    }\r\n    const result = analyze(fn, raw);\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Column className=\"editors\">\r\n                <form ref={formRef}>\r\n                    <label htmlFor=\"template\">Select template: </label>\r\n                    <select title=\"Template\" onChange={onSelectChange} name=\"template\">\r\n                        <option selected\r\n                                value={Template.MAP}>{Template.MAP}</option>\r\n                        <option\r\n                            value={Template.FILTER}>{Template.FILTER}</option>\r\n                        <option\r\n                            value={Template.REDUCE}>{Template.REDUCE}</option>\r\n                    </select>\r\n                </form>\r\n                <Editor value={fn} onChange={setFn}/>\r\n                <Editor value={raw} onChange={setRaw}/>\r\n            </Column>\r\n            <Column className=\"result\">\r\n                <div>{result && itemCounter(result)}</div>\r\n                <pre>\r\n          <code className=\"language-js\">{JSON.stringify(result, null, 2)}</code>\r\n        </pre>\r\n            </Column>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}