{"version":3,"sources":["App.tsx",".templates/function.js","serviceWorker.ts","index.tsx","components/TextArea.tsx","components/index.ts"],"names":["Container","styled","main","_templateObject","window","innerHeight","innerWidth","Column","div","_templateObject2","analyze","fn","data","f","eval","concat","JSON","parse","_unused","useHandler","_ref","_ref2","Object","_Users_ulises_WebstormProjects_array_analyzer_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setter","_ref3","value","target","itemCounter","array","length","App","_useHandler","useState","stringify","_useHandler2","raw","rawHandler","_useHandler3","fnTemplate","_useHandler4","fnHandler","result","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components__WEBPACK_IMPORTED_MODULE_4__","spellCheck","onChange","__webpack_exports__","Boolean","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","TextArea","textarea","toFixed","__webpack_require__","d"],"mappings":"u2DAOA,IAAMA,UAAYC,iDAAOC,KAAVC,kBAGHC,OAAOC,YAGRD,OAAOE,WAWGF,OAAOC,aAMtBE,OAASN,iDAAOO,IAAVC,oBAQZ,SAASC,QAAQC,GAAYC,MAC3B,IACE,IAAIC,EAAI,SAACD,GAAD,OAAkBA,GAE1B,OADAE,KAAI,OAAAC,OAAQJ,KACLE,EAAEG,KAAKC,MAAML,OACpB,MAAAM,SACA,OAAOF,KAAKC,MAAML,OAItB,SAASO,WAATC,GAAoI,IAAAC,EAAAC,OAAAC,gIAAA,EAAAD,CAAAF,EAAA,GAA/GI,EAA+GH,EAAA,GAAxGI,EAAwGJ,EAAA,GAClI,MAAO,CACLG,EACA,SAAAE,GAAyD,IAA9CC,EAA8CD,EAAvDE,OAASD,MACTF,EAAOE,KAKb,SAASE,YAAYC,GACnB,iBAAAf,OAAkBe,EAAMC,OAAxB,WAGF,IAAMC,IAA6B,WAAM,IAAAC,EACbd,WAAWe,oDAASlB,KAAKmB,UAAUvB,kDAAM,KAAM,KADlCwB,EAAAd,OAAAC,gIAAA,EAAAD,CAAAW,EAAA,GAChCI,EADgCD,EAAA,GAC3BE,EAD2BF,EAAA,GAAAG,EAEfpB,WAAWe,oDAASM,qDAFLC,EAAAnB,OAAAC,gIAAA,EAAAD,CAAAiB,EAAA,GAEhC5B,EAFgC8B,EAAA,GAE5BC,EAF4BD,EAAA,GAGjCE,EAASjC,QAAQC,EAAI0B,GAE3B,OACEO,2CAAAC,EAAAC,cAAC9C,UAAD,KACE4C,2CAAAC,EAAAC,cAACvC,OAAD,KACEqC,2CAAAC,EAAAC,cAACC,yCAAA,EAAD,CAAUC,YAAY,EAAOrB,MAAOhB,EAAIsC,SAAUP,KAEpDE,2CAAAC,EAAAC,cAACvC,OAAD,KACEqC,2CAAAC,EAAAC,cAACC,yCAAA,EAAD,CAAUC,YAAY,EAAOrB,MAAOU,EAAKY,SAAUX,IACnDM,2CAAAC,EAAAC,cAACvC,OAAD,KACEqC,2CAAAC,EAAAC,cAAA,WACGH,GAAUd,YAAYc,IAEzBC,2CAAAC,EAAAC,cAAA,WACEF,2CAAAC,EAAAC,cAAA,YACC9B,KAAKmB,UAAUQ,EAAQ,KAAM,SAS3BX,2DCxFDkB,EAAA,8ilBCYMC,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAZ,EAAAC,cAACd,EAAA,EAAD,MAAS0B,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kREzIZ,IAAMC,OAAWjE,EAAOkE,SAAVhE,KAIJC,OAAOC,YAAY,GAAG+D,QAAQ,ICN/CC,EAAAC,EAAApB,EAAA,sBAAAgB","file":"static/js/main.87f1e1d7.chunk.js","sourcesContent":["import React, {ChangeEvent, ChangeEventHandler, FunctionComponent, useState, SetStateAction, Dispatch} from 'react';\nimport styled from \"styled-components\";\nimport {TextArea} from \"./components\";\nimport fnTemplate from './.templates/function';\nimport data from './.templates/data.json';\n\n\nconst Container = styled.main`\n  display: flex;\n  flex-direction: row;\n  height: ${window.innerHeight}px;\n  padding: 0;\n  margin: 0;\n  width: ${window.innerWidth}px;\n  \n  & > :first-child {\n    max-width: 400px;\n    min-width: 300px;\n  }\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n      \n    & > :first-child {\n      height: calc(${window.innerHeight}px / 2);\n      max-width: 100%;\n    }\n  }\n`;\n\nconst Column = styled.div`\n  display: grid;\n  grid-template-rows: 1fr;\n  grid-auto-columns: 1fr;\n  width: 100%;\n  overflow: auto;\n`;\n\nfunction analyze(fn: string, data: string) {\n  try{\n    let f = (data: string) => data;\n    eval(`f = ${fn}`);\n    return f(JSON.parse(data));\n  } catch {\n    return JSON.parse(data)\n  }\n}\n\nfunction useHandler([state, setter]: [string, Dispatch<SetStateAction<string>>]): [string, ChangeEventHandler<HTMLTextAreaElement>] {\n  return [\n    state,\n    ({target: {value}}: ChangeEvent<HTMLTextAreaElement>) => {\n      setter(value);\n    }\n  ];\n}\n\nfunction itemCounter(array: any[]){\n  return `Length: ${array.length} items.`;\n}\n\nconst App: FunctionComponent<{}> = () => {\n  const [raw, rawHandler] = useHandler(useState(JSON.stringify(data, null, 2)));\n  const [fn, fnHandler] = useHandler(useState(fnTemplate));\n  const result = analyze(fn, raw);\n\n  return (\n    <Container>\n      <Column>\n        <TextArea spellCheck={false} value={fn} onChange={fnHandler}/>\n      </Column>\n      <Column>\n        <TextArea spellCheck={false} value={raw} onChange={rawHandler}/>\n        <Column>\n          <div>\n            {result && itemCounter(result)}\n          </div>\n          <pre>\n            <code>\n            {JSON.stringify(result, null, 2)}\n            </code>\n          </pre>\n        </Column>\n      </Column>\n    </Container>\n  );\n};\n\nexport default App;\n\n","export default `function(data){\n  return data.filter( e => e.department === 'BACK')\n}`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import styled from 'styled-components';\n\nexport const TextArea = styled.textarea`\n  background-color: black;\n  color: limegreen;\n  font-size: 1rem;\n  min-height: ${(window.innerHeight/2).toFixed(0)}px;\n  outline: none;\n  padding: 1rem;\n  resize: none; \n`;","export * from './TextArea';"],"sourceRoot":""}